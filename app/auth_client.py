from flask import g, request, current_app as app
from os import urandom
import hmac as hm
import hashlib
import requests

class AuthClient(object):
    def __init__(self, **kwargs):
        # from auth
        self.shop = kwargs.get('shop')
        self.hmac = kwargs.get('hmac')

        # config/autogenerated
        self.state = self.state()
        self.api_key = app.config['SHOPIFY_KEY']
        self.api_secret = app.config['SHOPIFY_SECRET']
        self.scope = ",".join(app.config['SHOPIFY_SCOPES'])
        self.redirect_uri = app.config['SHOPIFY_REDIRECT_URI']

        # from callback
        self.code = None
        self.token = {
            "access_token": None,
            "scope": None,
            # these only exist for offline
            "expires_in": None,
            "associated_user_scope": None,
            "associated_user": None,
        }

    def state(self):
        # state is the same as nonce
        return urandom(24)


class MyAuthClient(AuthClient):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # for k,v in kwargs.items():
        #     setattr(self, k, v)

    def authorization_url(self):
        self.auth_url =f"https://{self.shop}/admin/oauth/authorize?client_id={self.api_key}&scope={self.scope}&redirect_uri={self.redirect_uri}&state={self.state}"
        return self.auth_url

    def get_token_url(self):
        self.token_url = f"https://{self.shop}/admin/oauth/access_token"
        return self.token_url

    # TODO: this isn't working
    def check_state(self, state):
        # The nonce is the same one that your app provided to Shopify during step two.
        return self.state == state

    def check_hmac(self, args):
        # The hmac is valid. The HMAC is signed by Shopify as explained below, in Verification.
        args_no_hmac = ""
        hmac = ""
        for key, val in args.items():
            if key != 'hmac':
                args_no_hmac += f"{key}={val}&"
            else:
                hmac = val
        args_no_hmac = args_no_hmac[:-1]
        signature = hm.new(bytes(self.api_secret , 'latin-1'), msg = bytes(args_no_hmac , 'latin-1'), digestmod = hashlib.sha256).hexdigest()
        if signature != hmac:
            return False
        else:
            return True

    def check_hostname(self):
        # The hostname parameter is a valid hostname, ends with myshopify.com, and does not contain characters other than letters (a-z), numbers (0-9), dots, and hyphens.
        # You can use a regular expression like the following example to confirm that the hostname is valid:
            # /(https|http)\:\/\/[a-zA-Z0-9][a-zA-Z0-9\-]*\.myshopify\.com[\/]?/
        pass

    def fetch_token(self):
        data = {
            'client_id': self.api_key,
            'client_secret': self.api_secret,
            'code': self.code,
        }
        url = self.get_token_url()
        r = requests.post(url, data=data)
        self.token = r.json()

    def query_shopify(self):
        # X-Shopify-Access-Token: {self.access_token["access_token"]} in header to make requests
        pass


#######################################################
# HELPER FUNCTIONS
#######################################################
def get_auth_client(prefix, **kwargs):
    auth_client_name = f"{prefix}_auth_client"

    if auth_client_name not in g:
        client = MyAuthClient(
            shop=request.args.get('shop'),
            hmac=request.args.get('hmac')
        )
        setattr(g, auth_client_name, client)

    return g.get(auth_client_name)
